/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jframegui;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;

import java.util.Random;
import java.lang.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author berd1810
 */
public class pigDice extends javax.swing.JFrame {

    Random r = new Random();

    int playerNumber = 0, permanentplayerPoints = 0,
            currentplayerPoints = 0, currentaiPoints = 0, aiNumber, permanentaiPoints = 0,
            player2Number, permanentplayer2Points = 0, currentplayer2Points = 0;

    boolean aiTurn = false, pvpMode;
//these variables will help the code decide which mode, and who's turn it will be.
    public pigDice() {
        initComponents();
        setLocationRelativeTo(null);
        buttononoff(false);

        jProgressBar1.setValue(0);
        jProgressBar2.setValue(0);
        jProgressBar3.setValue(0);

        jProgressBar1.setStringPainted(true);
        jProgressBar2.setStringPainted(true);
        jProgressBar3.setStringPainted(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pigTitle = new javax.swing.JLabel();
        player2 = new javax.swing.JTextField();
        AI = new javax.swing.JTextField();
        rollButton1 = new javax.swing.JButton();
        holdButton1 = new javax.swing.JButton();
        aiLabel = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        player2modeButton = new javax.swing.JButton();
        aimodeButton = new javax.swing.JButton();
        player1 = new javax.swing.JTextField();
        rollButton2 = new javax.swing.JButton();
        holdButton2 = new javax.swing.JButton();
        player1Label = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        jProgressBar3 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 153, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 153, 153));

        pigTitle.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        pigTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pigTitle.setText("Pig Dice Game - Choose Opponent - You can customize names as well!");

        player2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        player2.setText("Player 2");
        player2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2ActionPerformed(evt);
            }
        });

        AI.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        AI.setText("AI");
        AI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AIActionPerformed(evt);
            }
        });

        rollButton1.setText("Roll");
        rollButton1.setOpaque(true);
        rollButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButton1ActionPerformed(evt);
            }
        });

        holdButton1.setText("Hold");
        holdButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holdButton1ActionPerformed(evt);
            }
        });

        aiLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        aiLabel.setText("AI result will appear here");
        aiLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        aiLabel.setFocusable(false);
        aiLabel.setInheritsPopupMenu(false);

        player2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player2Label.setText("Player 2 result");
        player2Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        player2modeButton.setText("Player 2");
        player2modeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2modeButtonActionPerformed(evt);
            }
        });

        aimodeButton.setText("AI");
        aimodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aimodeButtonActionPerformed(evt);
            }
        });

        player1.setText("Player 1");
        player1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player1ActionPerformed(evt);
            }
        });

        rollButton2.setText("Roll");
        rollButton2.setFocusable(false);
        rollButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rollButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButton2ActionPerformed(evt);
            }
        });

        holdButton2.setText("Hold");
        holdButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                holdButton2ActionPerformed(evt);
            }
        });

        player1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        player1Label.setText("Player 1 result");
        player1Label.setToolTipText("");
        player1Label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(player1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(rollButton1)
                                .addGap(18, 18, 18)
                                .addComponent(holdButton1)))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rollButton2)
                                .addGap(34, 34, 34)
                                .addComponent(holdButton2))
                            .addComponent(player2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(player2modeButton)
                        .addGap(93, 93, 93)
                        .addComponent(aimodeButton)))
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(player1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(168, 168, 168)
                .addComponent(player2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AI, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pigTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetButton)
                                .addGap(29, 29, 29))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(pigTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aimodeButton)
                    .addComponent(player2modeButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(rollButton1)
                                    .addComponent(holdButton1)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rollButton2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(holdButton2, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(player1Label, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jProgressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(aiLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(player1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(player2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(AI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetButton)
                .addGap(26, 26, 26))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static void buttononoff(boolean on) {

        //method to call when you want to turn off or on all the components of the game   
        rollButton1.setEnabled(on);
        holdButton1.setEnabled(on);

        rollButton2.setEnabled(on);
        holdButton2.setEnabled(on);

        AI.setEnabled(on);
        player1.setEnabled(on);
        player2.setEnabled(on);

    }

    public void checkWin() {
        //method to check win, checks every player.

        if (pvpMode == true && permanentplayerPoints >= 100) {
            JOptionPane.showMessageDialog(null, "Player 1 Wins");
            buttononoff(false);

        } else if (pvpMode == true && permanentplayer2Points >= 100) {
            JOptionPane.showMessageDialog(null, "Player 2 Wins");
            buttononoff(false);
        } else if (pvpMode == false && permanentplayerPoints >= 100) {

            JOptionPane.showMessageDialog(null, "Player 1 Wins");
            buttononoff(false);
        } else if (pvpMode == false && permanentaiPoints >= 100) {
            JOptionPane.showMessageDialog(null, "AI Wins");
            buttononoff(false);
        }

    }

    public void aiAction(int aiNumber) {

        //while it is ai's turn, it will roll and add the points to its current points.     
        while (aiTurn = true) {

            if (aiNumber == 1) {
                currentaiPoints = 0;

                System.out.println("Rolled a 1: player 1's turn");
                break;

            } else {
                currentaiPoints += aiNumber;

            }

            System.out.println("current ai points:" + currentaiPoints);
            //AI Strategy: if temportary points is greater or equal to 15, stop and add it to the permanent points. If not,keep going
            if (currentaiPoints < 15) {

                aiNumber = r.nextInt(1, 7);

            } else if (currentaiPoints >= 15) {

                
                
                
                permanentaiPoints += currentaiPoints;
                jProgressBar3.setValue(permanentaiPoints);
                currentaiPoints = 0;

                break;

            }
            //if the permanent points is greater than or equal to 80, it will keep going until it wins, since the ai is very close to winning
            if(permanentaiPoints>=80){
                aiNumber = r.nextInt(1, 7);
            }

        }
        //display the permanent ai points after it completes its turn
        aiLabel.setText("AI Permanent points: " + permanentaiPoints);
        aiTurn = false;
        System.out.println("permanent ai points:" + permanentaiPoints);
        rollButton2.setEnabled(false);
        holdButton2.setEnabled(false);

        rollButton1.setEnabled(true);
        holdButton1.setEnabled(true);

    }


    private void player2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player2ActionPerformed

    private void AIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AIActionPerformed

    private void rollButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButton1ActionPerformed

        playerNumber = r.nextInt(1, 7);

        if (playerNumber == 1) {
            currentplayerPoints = 0;
            player1Label.setText("<html>rolled 1, current points: " + currentplayerPoints + "<br/> permanent points: <html>" + permanentplayerPoints);
            //disable player 1 button, so that the players cannot play while the other player is playing
            rollButton2.setEnabled(true);
            holdButton2.setEnabled(true);

            rollButton1.setEnabled(false);
            holdButton1.setEnabled(false);

            if (pvpMode == false) {
                aiAction(r.nextInt(1, 7));
            }

        } else {
            currentplayerPoints += playerNumber;
            player1Label.setText("<html>rolled " + playerNumber + " current points: " + currentplayerPoints + "<br/> permanent points: <html>" + permanentplayerPoints);

            System.out.println(currentplayerPoints);
            checkWin();

        }


    }//GEN-LAST:event_rollButton1ActionPerformed

    private void holdButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holdButton1ActionPerformed

        permanentplayerPoints += currentplayerPoints;
        jProgressBar1.setValue(permanentplayerPoints);
        player1Label.setText("<html>you held,<br/> permanent points: <html>" + permanentplayerPoints);
        System.out.println(permanentplayerPoints);
        currentplayerPoints = 0;
        aiTurn = true;

        rollButton1.setEnabled(false);
        holdButton1.setEnabled(false);

        rollButton2.setEnabled(true);
        holdButton2.setEnabled(true);

        //goes to ai's turn if the conditions are true, (if the mode is ai mode, and it is ai's turn)
        if (pvpMode == false && aiTurn == true) {
            aiAction(r.nextInt(1, 7));

        }

        checkWin();


    }//GEN-LAST:event_holdButton1ActionPerformed

    private void aimodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aimodeButtonActionPerformed
        player2.setEnabled(false);
        player2.setVisible(false);
        rollButton2.setEnabled(false);
        rollButton2.setVisible(false);
        holdButton2.setEnabled(false);
        holdButton2.setVisible(false);
        player2modeButton.setEnabled(false);
        player2Label.setVisible(false);
        player1.setEnabled(true);

        jProgressBar2.setVisible(false);

        rollButton1.setEnabled(true);
        holdButton1.setEnabled(true);
        AI.setEnabled(true);

        pigTitle.setText("ONGOING GAME");

        pvpMode = false;
    }//GEN-LAST:event_aimodeButtonActionPerformed

    private void player1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player1ActionPerformed

    private void rollButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButton2ActionPerformed
        player2Number = r.nextInt(1, 7);

        if (player2Number == 1) {
            currentplayer2Points = 0;
            player2Label.setText("<html>rolled 1, current points: " + currentplayer2Points + "<br/> permanent points: <html>" + permanentplayer2Points);

            rollButton2.setEnabled(false);
            holdButton2.setEnabled(false);

            rollButton1.setEnabled(true);
            holdButton1.setEnabled(true);

        } else {
            currentplayer2Points += player2Number;
            player2Label.setText("<html>rolled " + player2Number + " current points: " + currentplayer2Points + "<br/> permanent points: <html>" + permanentplayer2Points);

            System.out.println(currentplayer2Points);
        }
        checkWin();

    }//GEN-LAST:event_rollButton2ActionPerformed

    private void holdButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_holdButton2ActionPerformed

        permanentplayer2Points += currentplayer2Points;

        jProgressBar2.setValue(permanentplayer2Points);
        player2Label.setText("<html>you held,<br/> permanent points: <html>" + permanentplayer2Points);
        System.out.println(permanentplayer2Points);
        currentplayer2Points = 0;
        checkWin();

        rollButton2.setEnabled(false);
        holdButton2.setEnabled(false);

        rollButton1.setEnabled(true);
        holdButton1.setEnabled(true);

    }//GEN-LAST:event_holdButton2ActionPerformed

    private void player2modeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2modeButtonActionPerformed

        AI.setEnabled(false);
        aimodeButton.setEnabled(false);
        pvpMode = true;

        aiLabel.setVisible(false);
        AI.setVisible(false);

        rollButton1.setEnabled(true);
        holdButton1.setEnabled(true);

        rollButton2.setEnabled(true);
        holdButton2.setEnabled(true);

        player1.setEnabled(true);
        player2.setEnabled(true);
        jProgressBar3.setVisible(false);
        pigTitle.setText("ONGOING GAME");

    }//GEN-LAST:event_player2modeButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        buttononoff(false);
        player2modeButton.setEnabled(true);
        aimodeButton.setEnabled(true);
        playerNumber = 0;
        permanentplayerPoints = 0;
        currentplayerPoints = 0;
        currentaiPoints = 0;
        aiNumber = 0;
        permanentaiPoints = 0;
        player2Number = 0;
        permanentplayer2Points = 0;
        currentplayer2Points = 0;

        player1Label.setText("Player 1 Result");
        player2Label.setText("Player 2 Result");
        aiLabel.setText("AI result will appear here");

        rollButton1.setVisible(true);
        holdButton1.setVisible(true);

        rollButton2.setVisible(true);
        holdButton2.setVisible(true);
        aiLabel.setVisible(true);
        AI.setVisible(true);
        player1.setVisible(true);
        player2.setVisible(true);
        player2Label.setVisible(true);

        AI.setText("AI");
        player1.setText("Player 1");
        player2.setText("Player 2");
        pigTitle.setText("Pig Dice Game - Choose Opponent - You can customize names as well!");

        jProgressBar1.setVisible(true);
        jProgressBar2.setVisible(true);
        jProgressBar3.setVisible(true);

        jProgressBar1.setValue(0);
        jProgressBar2.setValue(0);
        jProgressBar3.setValue(0);
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pigDice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pigDice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pigDice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pigDice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pigDice().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField AI;
    private javax.swing.JLabel aiLabel;
    private javax.swing.JButton aimodeButton;
    public static javax.swing.JButton holdButton1;
    public static javax.swing.JButton holdButton2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar jProgressBar3;
    private javax.swing.JLabel pigTitle;
    public static javax.swing.JTextField player1;
    private javax.swing.JLabel player1Label;
    public static javax.swing.JTextField player2;
    private javax.swing.JLabel player2Label;
    private javax.swing.JButton player2modeButton;
    public static javax.swing.JButton resetButton;
    public static javax.swing.JButton rollButton1;
    public static javax.swing.JButton rollButton2;
    // End of variables declaration//GEN-END:variables
}
