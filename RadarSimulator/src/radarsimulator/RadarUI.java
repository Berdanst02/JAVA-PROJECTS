/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package radarsimulator;

import java.util.*;
import java.awt.*;
import java.awt.event.ActionEvent;        //for the timer
import java.awt.event.ActionListener;     //for the timer 
import java.awt.geom.Line2D;              //line 2d shape 
import javax.swing.Timer;

public class RadarUI extends javax.swing.JFrame {

    Graphics g; //graphics object that will pull graphic data from the Radar jPanel
    int radius = 200; // radius of the radar screen 
    int angle; //current angle of the radar sweeper (0 to 359) 
    Random r = new Random(); 
    
    Point.Double airport = new Point.Double(200,200); //airport location (center of radar)
    ArrayList<Aircraft> aircrafts = new ArrayList<>(); //stores all aicraft objects currently on radar  
    
    double tolerance = 0.001D; //allow for point to be slightly off calculated line 
    
    Timer timer = new Timer(10, new ActionListener(){ //declare what happens each timer tick 
        @Override 
        public void actionPerformed(ActionEvent e){
            g = Radar.getGraphics();
            
            double x = ((radius * Math.cos(angle * Math.PI /180D)) + airport.x);
            double y = ((radius * Math.sin(angle * Math.PI / 180D)) + airport.y);
            ArrayList<Aircraft> arrivedFlights = new ArrayList<>();
            
            paintRadar(g, x, y); //paint basic radar screen 
            
            for(Aircraft a : aircrafts){ //iterate through aircrafts list and draw each one 
                DrawAircraft(a, g); 
            
            if(IsPointOnLine(airport, RadarLimitPoint(radius,angle,airport), a.getCoordinates())){
                boolean arrived = a.moveAircraft();
                if (arrived){
                    System.out.printf("Aircraft has arrived.\n"); 
                    arrivedFlights.add(a); 
                }
            }
            }
            
            aircrafts.removeAll(arrivedFlights); 
            
            if (r.nextInt(100)==1) {
                aircrafts.add(new Aircraft (x,y)); 
                DrawAircraft(aircrafts.get(aircrafts.size() - 1), g);
                System.out.println("Aircraft added!"); 
            }
        }
        
        
    }); 
    
    public void paintRadar(Graphics g, double x, double y){
        Graphics2D g2 = (Graphics2D) g; //convert from graphics to graphics2d through casting 
        g.setColor(Color.BLACK);        //draw the radar screen base 
        g.fillRect(0,0,400,400);
        g.setColor(Color.GREEN);
        g.drawOval(0, 0, 400, 400);
        
        Line2D lin = new Line2D.Double(airport.x, airport.y, x,y);
        g2.draw(lin);
        
        AngleLabel.setText("Angle: " + angle);
        
        angle++;
        if(angle == 360) angle = 0; 
    }
    
    private void DrawAircraft(Aircraft a, Graphics g){
        Graphics2D g2 = (Graphics2D) g;
        g2.setColor(Color.GREEN);
        g2.fill(a.getBlip()); //pull and draw the radarBlip ellipse from the current aircraft 
    }
    
    public static Point.Double RadarLimitPoint(double radius, double angleInDegrees, Point.Double origin){
        //convert from degrees to radians val multiplication by PI/180
        double x = ((radius * Math.cos(angleInDegrees * Math.PI / 180D)) + origin.x);
        double y = ((radius * Math.sin(angleInDegrees * Math.PI / 180D)) + origin.y);
        
        return new Point.Double(x,y);
    }
    
    private boolean IsPointOnLine(Point.Double linePointA, Point.Double linePointB, Point.Double point){
        
        double d1 = Point.distance(linePointA.x, linePointA.y, point.x, point.y);
        double d2 = Point.distance(linePointB.x, linePointB.y, point.x, point.y);
        
        if((d1 + d2 - Point.distance(linePointA.x,linePointA.y, linePointB.x, linePointB.y) < tolerance))
            return true;
        return false; 
    }
    
    
    public RadarUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Radar = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        AngleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Radar.setMinimumSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout RadarLayout = new javax.swing.GroupLayout(Radar);
        Radar.setLayout(RadarLayout);
        RadarLayout.setHorizontalGroup(
            RadarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        RadarLayout.setVerticalGroup(
            RadarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        AngleLabel.setText("Angle: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(Radar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(AngleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(StartButton)
                .addGap(105, 105, 105))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartButton)
                    .addComponent(AngleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Radar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        timer.start(); 
    }//GEN-LAST:event_StartButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RadarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RadarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RadarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RadarUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RadarUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AngleLabel;
    private javax.swing.JPanel Radar;
    private javax.swing.JButton StartButton;
    // End of variables declaration//GEN-END:variables
}
